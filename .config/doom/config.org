# -*- mode: org -*-
#+TITLE: Doom Emacs Configuration
#+AUTHOR: valentinlechner
#+PROPERTY: header-args:emacs-lisp :tangle yes :cache yes :results silent :comments link
#+PROPERTY: header-args :tangle no :results silent
#+HTML_HEAD: <link rel='shortcut icon' type='image/png' href='https://www.gnu.org/software/emacs/favicon.png'>

* Rudimentary configuration

Make this file run (slightly) faster with lexical binding (see [[https://nullprogram.com/blog/2016/12/22/][this blog post]]
for more info).
#+BEGIN_SRC emacs-lisp :comments no
;;; config.el -*- lexical-binding: t; -*-
#+END_SRC

** Personal information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Valentin Lechner"
      user-mail-address "valentin_lechner@dismail.de")
#+END_SRC

Speaking of ~GPG~, I want to use =~/.config/authinfo.gpg= instead of the default in
=~/.emacs.d=.
#+BEGIN_SRC emacs-lisp
(setq auth-sources '("~/.config/auth/authinfo.gpg")
      auth-source-cache-expiry nil) ; default is 7200 (2h)
#+END_SRC

In Germany, our week starts on monday
#+BEGIN_SRC emacs-lisp
(setq calendar-week-start-day 1)
#+END_SRC

** Doom configuration

*** Fontset

Doom exposes five (optional) variables for controlling fonts in Doom.
Here are the three important ones:

+ =doom-font=
+ =doom-variable-pitch-font=
+ =doom-big-font= -- used for =doom-big-font-mode=; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or
xlfd font string.

For ligature-Support I use the Iosevka Font.
The main (=doom-font=) is a patched [[https://github.com/jsravn/iosevka-emacs][Iosevka Font]] (monospace,
extralight).

Ligature Showcase:
#+BEGIN_example
  <->
  <-->
  <--->
  <---->
  <----->
  ;; Double-ended equals arrows
  <=>
  <==>
  <===>
  <====>
  <=====>
  ;; Double-ended asterisk operators
  <**>
  <***>
  <****>
  <*****>
  ;; HTML comments
  <!--
  <!---
  ;; Three-char ops with discards
  <$
  <$>
  $>
  <.
  <.>
  .>
  <*
  <*>
  *>
  <\\
  <\\>
  \\>
  </
  </>
  />
  <\"
  <\">
  \">
  <'
  <'>
  '>
  <^
  <^>
  ^>
  <&
  <&>
  &>
  <%
  <%>
  %>
  <@
  <@>
  @>
  <#
  <#>
  #>
  <+
  <+>
  +>
  <-
  <->
  ->
  <!
  <!>
  !>
  <?
  <?>
  ?>
  <|
  <|>
  |>
  <:
  <:>
  :>
  ;; Colons
  ::
  :::
  ::::
  ;; Arrow-like operators
  ->
  ->-
  ->--
  ->>
  ->>-
  ->>--
  ->>>
  ->>>-
  ->>>--
  -->
  -->-
  -->--
  -->>
  -->>-
  -->>--
  -->>>
  -->>>-
  -->>>--
  >-
  >--
  >>-
  >>--
  >>>-
  >>>--
  =>
  =>=
  =>==
  =>>
  =>>=
  =>>==
  =>>>
  =>>>=
  =>>>==
  ==>
  ==>=
  ==>==
  ==>>
  ==>>=
  ==>>==
  ==>>>
  ==>>>=
  ==>>>==
  >=
  >==
  >>=
  >>==
  >>>=
  >>>==
  <-
  -<-
  --<-
  <<-
  -<<-
  --<<-
  <<<-
  -<<<-
  --<<<-
  <--
  -<--
  --<--
  <<--
  -<<--
  --<<--
  <<<--
  -<<<--
  --<<<--
  -<
  --<
  -<<
  --<<
  -<<<
  --<<<
  <=
  =<=
  ==<=
  <<=
  =<<=
  ==<<=
  <<<=
  =<<<=
  ==<<<=
  <==
  =<==
  ==<==
  <<==
  =<<==
  ==<<==
  <<<==
  =<<<==
  ==<<<==
  =<
  ==<
  =<<
  ==<<
  =<<<
  ==<<<
  ;; Monadic operators
  >=>
  >->
  >-->
  >==>
  <=<
  <-<
  <--<
  <==<
  ;; Composition operators
  >>
  >>>
  <<
  <<<
  ;; Lens operators
  :+
  :-
  :=
  +:
  -:
  =:
  =^
  =+
  =-
  =*
  =/
  =%
  ^=
  +=
  -=
  *=
  /=
  %=
  ;; Logical
  /\\
  \\/
  <>
  <+
  <+>
  +>
#+END_example

The =variable-pitch-font=, which gets used in =variable-pitch-mode= or
=mixed-pitch-mode=, is the Quasi-Proportional Font /Iosevka Sparkle/, in
my case taken directly from the
[[https://github.com/be5invis/Iosevka/releases/tag/v3.4.6][Iosevka Repository]]

The =doom-serif-font= is from the same repository.
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec
                    :family "Iosevka"
                    :size 22
                    :weight 'extralight)
      doom-variable-pitch-font (font-spec
                                :family "Iosevka Sparkle"
                                :weight 'extralight
                                :size 22)
      doom-big-font (font-spec
                     :family "Iosevka"
                     :weight 'light
                     :size 24)
      doom-serif-font (font-spec
                       :family "Iosevka Aile"
                       :weight 'extralight
                       :size 22))
#+END_SRC

*** Theme

There are two ways to load a theme. Both assume the theme is installed
and available. You can either set `doom-theme' or manually load a
theme with the `load-theme' function. This is the default:
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-moonlight)
#+END_SRC

Changes the name of the dashboard to something recognisable
#+BEGIN_SRC emacs-lisp
(setq doom-fallback-buffer-name "► Doom"
      +doom-dashboard-name "► Doom")
#+END_SRC

** Editor settings


*** Line numbering

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
#+END_SRC

*** Nyan Mode

Use NyanCat to show buffer size and position in mode-line
#+BEGIN_SRC emacs-lisp
(nyan-mode 0)
(use-package! nyan-mode
  :config
  (setq nyan-animate-nyancat t)
  (setq nyan-wavy-trail t))
#+END_SRC

*** Poke-Line

Testing out poke-line instead of nyan-mode
#+BEGIN_SRC emacs-lisp
(use-package! poke-line
  :config
  (poke-line-global-mode 1)
  (poke-line-set-pokemon "magikarp"))
#+END_SRC

*** Default encoding
I like my files to always use =utf-8= encoding
#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

*** Tabs vs whitespaces?!

As for the whitespace/tabs debate, I use whitespaces.
I like to specify that tabs are just x spaces, depending on language.
My argument against tabs is that it is something you can't see in a
lot of editors or a lot of viewers, for example in a webpage, by
default. Usually, I would assume that there are spaces - but who
knows?
#+BEGIN_SRC emacs-lisp
(setq  indent-tabs-mode nil)
#+END_SRC
Therefore, I use a global editorconfig file:
#+BEGIN_SRC conf :tangle ~/.editorconfig
[*]
end_of_line = lf
indent_style = space
#+END_SRC

*** Window Layout

Take new window space from all windows, not just the active one
#+BEGIN_SRC emacs-lisp
(setq window-combination-resize t)
#+END_SRC

*** Better Undo

Making changes more granular for undo
#+BEGIN_SRC emacs-lisp
(setq evil-want-fine-undo t)
#+END_SRC
*** Autosaving

#+BEGIN_SRC emacs-lisp
(setq auto-save-default t)
#+END_SRC

*** Better ellipsis

Use unicode ellipsis instead of ... - it saves a lot of space
#+BEGIN_SRC emacs-lisp
(setq truncate-string-ellipsis "…")
#+END_SRC

*** Final newline in files?!

Since the final newline did mess with my ~~/.authinfo.gpg~ for forge quite a lot
(it doesn't allow a final newline) I decided why not deactivate it.
#+BEGIN_SRC emacs-lisp
(setq require-final-newline nil)
#+END_SRC

*** Mouse-pasting
set mouse to yank where i click: http://sachachua.com/blog/2017/04/emacs-pasting-with-the-mouse-without-moving-the-point-mouse-yank-at-point/
#+BEGIN_SRC emacs-lisp
(setq mouse-yank-at-point t)
#+END_SRC



** Programming settings

*** Autocompletion
Ensure, that autocompletion only helps when needed.
The author of doom, hlissner, says to this on his personal config:
#+BEGIN_QUOTE
IMO, modern editors have trained a bad habit into us all: a burning
need for completion all the time -- as we type, as we breathe, as we
pray to the ancient ones -- but how often do you *really* need that
information? I say rarely. So opt for manual completion:
can be invoked using C-SPC
   --- hlissner
#+END_QUOTE
After working on a few large projects where you would SMASH the ESC-key to
cancel loading suggestions, I appreciate that opinion.
#+BEGIN_SRC emacs-lisp
(setq company-idle-delay nil)
#+END_SRC

*** Whitespace Mode

I like displaying whitespaces, returns and so on
A positive value activates it, negative turns it off. However, I have
found that it's usually not needed when just writing.
Therefore, it's not a global mode, only activated in programming mode.
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'whitespace-mode)
#+END_SRC

*** Rainbows

Rainbow mode is for previewing #RRGGBB, {rgb}, {HTML}
It doesnt have a global mode
According to
https://stackoverflow.com/questions/16048231/how-to-enable-a-non-global-minor-mode-by-default-on-emacs-startup
you can enable it globally like this
#+BEGIN_SRC emacs-lisp
(define-globalized-minor-mode my-global-rainbow-mode rainbow-mode
  (lambda () (rainbow-mode 1)))

(my-global-rainbow-mode 1)
#+END_SRC
The other mode i like a lot is the rainbow delimiters mode
It displays parentheses in colors, depending on their 'deepness'
It's mainly useful in programming
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+END_SRC

*** Visual Line

I like the visual line mode
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode +1)
#+END_SRC

** Modeline settings

Show battery and time in modeline
#+BEGIN_SRC emacs-lisp
(display-time-mode +1)
(display-battery-mode +1)
#+END_SRC
We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case
#+BEGIN_SRC emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+END_SRC


* Treemacs

There are a lot of files which are unnecessary and blob treemacs. This adds a
mechanism to ignore them

#+BEGIN_SRC emacs-lisp
(after! treemacs
  (defvar treemacs-file-ignore-extensions '()
    "File extension which 'treemacs-ignore-filter' will ensure are ignored")
  (defvar treemacs-file-ignore-globs '()
    "Globs which will are transformed to 'treemacs-file-ignore-regexps' which 'treemacs-ignore-filter' will ensure are ignored")
  (defvar treemacs-file-ignore-regexps '()
    "RegExps to be tested to ignore files, generated from 'treeemacs-file-ignore-globs'")
  (defun treemacs-file-ignore-generate-regexps ()
    "Generate 'treemacs-file-ignore-regexps' from 'treemacs-file-ignore-globs'"
    (setq treemacs-file-ignore-regexps (mapcar 'dired-glob-regexp treemacs-file-ignore-globs)))
  (if (equal treemacs-file-ignore-globs '()) nil (treemacs-file-ignore-generate-regexps))
  (defun treemacs-ignore-filter (file full-path)
    "Ignore files specified by 'treemacs-file-ignore-extensions', and 'treemacs-file-ignore-regexps'"
    (or (member (file-name-extension file) treemacs-file-ignore-extensions)
        (let ((ignore-file nil))
          (dolist (regexp treemacs-file-ignore-regexps ignore-file)
            (setq ignore-file (or ignore-file (if (string-match-p regexp full-path) t nil)))))))
  (add-to-list 'treemacs-ignored-file-predicates #'treemacs-ignore-filter))
#+END_SRC

*** Treemacs Blocklist

#+BEGIN_SRC emacs-lisp
(setq treemacs-file-ignore-extensions '(;; LaTeX
                                        "aux"
                                        "ptc"
                                        "fdb_latexmk"
                                        "bbl"
                                        "fls"
                                        "synctex.gz"
                                        "toc"
                                        ;; LaTeX - glossary
                                        "glg"
                                        "glo"
                                        "gls"
                                        "glsdefs"
                                        "ist"
                                        "acn"
                                        "acr"
                                        "alg"
                                        ;; LaTeX - pgfplots
                                        "mw"
                                        ;; LaTeX - pdfx
                                        "pdfa.xmpi"
                                        ;; Python Compiled
                                        "pyc"
                                        ;; Elisp compiled
                                        "elc"
                                        ))
(setq treemacs-file-ignore-globs '(;; LaTeX
                                   "*/_minted-*"
                                   ;; AucTeX
                                   "*/.auctex-auto"
                                   "*/_region_.log"
                                   "*/_region_.tex"))

#+END_SRC


* Org

If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Daten/cloud/tlaloc/org/"
      org-archive-location (concat org-directory ".archive/$s::"))

#+END_SRC


#+BEGIN_SRC emacs-lisp
(use-package! org
#+END_SRC
** Configuring org

#+BEGIN_SRC emacs-lisp
  :config
#+END_SRC

*** Org Style

#+BEGIN_SRC emacs-lisp
(setq
  org-ellipsis " ▼ "
  org-superstar-headline-bullets-list '("✿" "■" "◆" "▲" "#")
)
#+END_SRC
Enable org-pretty-table
#+BEGIN_SRC emacs-lisp
  (setq global-org-pretty-table-mode t)
#+END_SRC
Inherit properties makes child-headings inherit parents properties
#+BEGIN_SRC emacs-lisp
  (setq org-use-property-inheritance t)
#+END_SRC
Let's make headings a bit bigger
#+BEGIN_SRC emacs-lisp
(custom-set-faces!
  '(outline-1 :weight extra-bold :height 1.25)
  '(outline-2 :weight bold :height 1.15)
  '(outline-3 :weight bold :height 1.12)
  '(outline-4 :weight semi-bold :height 1.09)
  '(outline-5 :weight semi-bold :height 1.06)
  '(outline-6 :weight semi-bold :height 1.03)
  '(outline-8 :weight semi-bold)
  '(outline-9 :weight semi-bold))
#+END_SRC

And the same with the title.
#+BEGIN_SRC emacs-lisp
(custom-set-faces!
    '(org-document-title :height 1.2))
#+END_SRC
Also, I only ever need the last chapters asterisk
#+BEGIN_SRC emacs-lisp
(setq org-hide-leading-stars t)
#+END_SRC
Syntax highlighting in code
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
Show pretty stuff in org mode
#+BEGIN_SRC emacs-lisp
(add-hook! 'org-mode-hook #'+org-pretty-mode
           'org-fragtog-mode
           'mixed-pitch-mode)
(setq global-org-pretty-table-mode t)
(setq
 org-fontify-whole-heading-line t
 org-fontify-done-headline t
 org-fontify-quote-and-verse-blocks t)
#+END_SRC
Change breadcrumbs
#+BEGIN_SRC emacs-lisp
(setq org-agenda-breadcrumbs-seperator " ❱ ")
#+END_SRC
Hide emphasis markers
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC
It's also nice to make use of the Unicode characters for check boxes, and other commands.
#+BEGIN_SRC emacs-lisp
(appendq! +ligatures-extra-symbols
            `(:checkbox      "☐"
              :pending       "◼"
              :checkedbox    "☑"
              :list_property "∷"
              :results       "R"
              :property      "P"
              :properties    "P"
              :end           "∎"
              :options       "O"
              :title         "T"
              :subtitle      "ST"
              :author        "A"
              :date          "D"
              :latex_header  "LH"
              :latex_class   "LC"
              :beamer_header "BH"
              :html_head     "HH"
              :begin_quote   "❮"
              :end_quote     "❯"
              :begin_export  "⬇"
              :end_export    "⬆"
              :priority_a   ,(propertize "⚑" 'face 'all-the-icons-red)
              :priority_b   ,(propertize "⬆" 'face 'all-the-icons-orange)
              :priority_c   ,(propertize "■" 'face 'all-the-icons-yellow)
              :priority_d   ,(propertize "⬇" 'face 'all-the-icons-green)
              :priority_e   ,(propertize "❓" 'face 'all-the-icons-blue)
              :em_dash       "—"))
  (set-ligatures! 'org-mode
    :merge t
    :checkbox      "[ ]"
    :pending       "[-]"
    :checkedbox    "[X]"
    :list_property "::"
    :results       "#+RESULTS:"
    :property      "#+PROPERTY:"
    :property      ":PROPERTIES:"
    :end           ":END:"
    :options       "#+OPTIONS:"
    :title         "#+TITLE:"
    :subtitle      "#+SUBTITLE:"
    :author        "#+AUTHOR:"
    :date          "#+DATE:"
    :latex_class   "#+LATEX_CLASS:"
    :latex_header  "#+LATEX_HEADER:"
    :html_head     "#+HTML_HEAD:"
    :beamer_header "#+BEAMER_HEADER:"
    :begin_quote   "#+BEGIN_QUOTE"
    :end_quote     "#+END_QUOTE"
    :begin_export  "#+BEGIN_EXPORT"
    :end_export    "#+END_EXPORT"
    :priority_a    "[#A]"
    :priority_b    "[#B]"
    :priority_c    "[#C]"
    :priority_d    "[#D]"
    :priority_e    "[#E]"
    :em_dash       "---")
    (plist-put +ligatures-extra-symbols
               :name "›")
#+END_SRC

**** Indentation

Disable =org-indent-mode=
=org-indent-mode= is an excellent default, but has the downside of increasing the
visual width of tthe file as headings are increasingly nested
To make it simpler, this forces consecutive indentation levels to increment one
character at a time with org-indent-indentation-per-level.
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented nil)
  (setq org-indent-indentation-per-level 1)
#+END_SRC
By default, org indents text to match the indentation. Setting it to nil
disables this behaviour
#+BEGIN_SRC emacs-lisp
  (setq org-adapt-indentation nil)
#+END_SRC

**** Lines
By default, visual-line-mode is turned on, and auto-fill-mode off by a hook.
However this messes with tables in Org-mode, and other plaintext files (e.g.
markdown, \LaTeX) so I’ll turn it off for this, and manually enable it for more
specific modes as desired.

#+BEGIN_SRC emacs-lisp
(remove-hook 'text-mode-hook #'visual-line-mode)
(add-hook 'text-mode-hook #'auto-fill-mode)
#+END_SRC
I don't like long columns. They are hard to parse - and even harder to navigate
using vim. I tend to do stuff like linebreaks after every
sentence and don't export linebreaks (org), but this is more solid as
it automatically adds a smart linebreak after 70 characters (smart meaning,
don't break my words or my code)
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook '(lambda () (setq fill-column 70)))
(add-hook 'org-mode-hook 'auto-fill-mode)
#+END_SRC
**** TODOs

#+BEGIN_SRC emacs-lisp
(setq org-enforce-todo-dependencies t)
(setq org-insert-heading-respect-content nil)
(setq org-reverse-note-order nil)
(setq org-deadline-warning-days 7)
(setq org-blank-before-new-entry (quote ((heading . t)
                                         (plain-list-item . nil))))
#+END_SRC
**** Smart parentheses
#+BEGIN_SRC emacs-lisp
(sp-local-pair
     '(org-mode)
     "<<" ">>"
     :actions '(insert))
#+END_SRC
**** Capture
#+BEGIN_SRC emacs-lisp
(require 'org-roam-protocol)
(setq org-capture-templates `(
    ("p" "Protocol" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
        "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
    ("L" "Protocol Link" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
        "* %? [[%:link][%:description]] \nCaptured On: %U")
))
#+END_SRC

** Refile
Global keybinding to open my refile-file
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c o")
  (lambda () (interactive) (find-file (concat org-directory "refile.org"))))
#+END_SRC

** Org Chef

#+BEGIN_SRC emacs-lisp
(use-package! org-chef
  :commands (org-chef-insert-recipe org-chef-get-recipe-from-url)
  :after org)
#+END_SRC

** Org Ref

#+BEGIN_SRC emacs-lisp
(use-package! org-ref
  :after org
  :config
  (setq org-ref-completion-library 'org-ref-ivy-cite))
#+END_SRC
Setting default files for org ref.
Mine are synced via nextcloud
#+BEGIN_SRC emacs-lisp
(setq
 org-ref-default-bibliography "~/Daten/cloud/tlaloc/org/Papers/references.bib"

 org-ref-pdf-directory "~/Daten/cloud/tlaloc/org/Papers/bibtex-pdfs"

 org-ref-bibliography-notes "~/Daten/cloud/tlaloc/org/Papers/notes.org"
 org-ref-open-pdf-function
 (lambda (fpath)
   (start-process "zathura" "*ivy-bibtex-zathura*" "/usr/bin/zathura" fpath))
)
#+END_SRC
use footcite as default cite
#+BEGIN_SRC emacs-lisp
(setq org-ref-default-citation-link "footcite")
#+END_SRC

** Org-Latex

Prefer user labels instead of internal labels
#+BEGIN_SRC emacs-lisp
(setq org-latex-prefer-user-labels t)
#+END_SRC
Use smart quotes
smart quotes means converting hyphens to m-dashes and
straight quotes to curly quotes
#+BEGIN_SRC emacs-lisp
(setq org-export-with-smart-quotes t)
#+END_SRC

This right here tells org to ignore ':ignore' tags, but to include the content
of them which I use for writing my thesis
#+BEGIN_SRC emacs-lisp
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines))
  (ox-extras-activate '(latex-header-blocks ignore-headlines))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(setq org-export-default-language "de")
#+END_SRC

Using this latex command ensures your bibliography to be set up as well as your glossaries
#+BEGIN_SRC emacs-lisp
(setq
 org-latex-pdf-process
 '("lualatex -shell-escape -interaction nonstopmode -output-directory %o %f"
   "biber %b"
   "lualatex -shell-escape -interaction nonstopmode -output-directory %o %f"
   "lualatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC
Setup preview commands
#+BEGIN_SRC emacs-lisp
'(org-preview-latex-process-alist
  (quote
   ((dvipng :programs
            ("lualatex" "dvipng")
            :description "dvi > png"
            :message "you need to install the programs: latex and dvipng."
            :image-input-type "dvi"
            :image-output-type "png"
            :image-size-adjust
            (1.0 . 1.0)
            :latex-compiler
            ("lualatex -output-format dvi -interaction nonstopmode -output-directory %o %f")
            :image-converter
            ("dvipng -fg %F -bg %B -D %D -T tight -o %O %f"))
    (dvisvgm :programs
             ("latex" "dvisvgm")
             :description "dvi > svg"
             :message "you need to install the programs: latex and dvisvgm."
             :use-xcolor t
             :image-input-type "xdv"
             :image-output-type "svg"
             :image-size-adjust
             (1.7 . 1.5)
             :latex-compiler
             ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
             :image-converter
             ("dvisvgm %f -n -b min -c %S -o %O"))
    (imagemagick :programs
                 ("latex" "convert")
                 :description "pdf > png"
                 :message "you need to install the programs: latex and imagemagick."
                 :use-xcolor t
                 :image-input-type "pdf"
                 :image-output-type "png"
                 :image-size-adjust
                 (1.0 . 1.0)
                 :latex-compiler
                 ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
                 :image-converter
                 ("convert -density %D -trim -antialias %f -quality 100 %O")))))
#+END_SRC
My latex classes
First off, the classic koma-article
#+BEGIN_SRC emacs-lisp
(after! ox-latex
  (add-to-list 'org-latex-classes
               '("koma-article"
                 "\\documentclass[ngerman,12pt]{scrartcl}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+END_SRC
Secondary, mimosis.
Mimosis is a class for writing books.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
             '("mimosis"
               "\\documentclass{mimosis}
 [NO-DEFAULT-PACKAGES]
 [PACKAGES]
 [EXTRA]"
               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\mboxparagraph{%s}" . "\\mboxparagraph*{%s}")
               ("\\mboxsubparagraph{%s}" . "\\mboxsubparagraph*{%s}")))
#+END_SRC
I dont use this one (yet).
The third one's a class for publications
#+BEGIN_SRC emacs-lisp
;; Elsarticle is Elsevier class for publications.
(add-to-list 'org-latex-classes
             '("elsarticle"
               "\\documentclass{elsarticle}
 [NO-DEFAULT-PACKAGES]
 [PACKAGES]
 [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
This is koma-book (scrbook)
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
             '("koma-book"
               "\\documentclass{scrbook}
 [NO-DEFAULT-PACKAGES]
 [PACKAGES]
 [EXTRA]"
               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\mboxparagraph{%s}" . "\\mboxparagraph*{%s}")
               ("\\mboxsubparagraph{%s}" . "\\mboxsubparagraph*{%s}")))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted)
#+END_SRC
Add Fragment justification
 #+BEGIN_SRC emacs-lisp
   (defun scimax-org-latex-fragment-justify (justification)
     "Justify the latex fragment at point with JUSTIFICATION.
 JUSTIFICATION is a symbol for 'left, 'center or 'right."
     (interactive
      (list (intern-soft
             (completing-read "Justification (left): " '(left center right)
                              nil t nil nil 'left))))
     (let* ((ov (ov-at))
            (beg (ov-beg ov))
            (end (ov-end ov))
            (shift (- beg (line-beginning-position)))
            (img (overlay-get ov 'display))
            (img (and (and img (consp img) (eq (car img) 'image)
                           (image-type-available-p (plist-get (cdr img) :type)))
                      img))
            space-left offset)
       (when (and img
                  ;; This means the equation is at the start of the line
                  (= beg (line-beginning-position))
                  (or
                   (string= "" (s-trim (buffer-substring end (line-end-position))))
                   (eq 'latex-environment (car (org-element-context)))))
         (setq space-left (- (window-max-chars-per-line) (car (image-size img)))
               offset (floor (cond
                              ((eq justification 'center)
                               (- (/ space-left 2) shift))
                              ((eq justification 'right)
                               (- space-left shift))
                              (t
                               0))))
         (when (>= offset 0)
           (overlay-put ov 'before-string (make-string offset ?\ ))))))

   (defun scimax-org-latex-fragment-justify-advice (beg end image imagetype)
     "After advice function to justify fragments."
     (scimax-org-latex-fragment-justify (or (plist-get org-format-latex-options :justify) 'left)))


   (defun scimax-toggle-latex-fragment-justification ()
     "Toggle if LaTeX fragment justification options can be used."
     (interactive)
     (if (not (get 'scimax-org-latex-fragment-justify-advice 'enabled))
         (progn
           (advice-add 'org--format-latex-make-overlay :after 'scimax-org-latex-fragment-justify-advice)
           (put 'scimax-org-latex-fragment-justify-advice 'enabled t)
           (message "Latex fragment justification enabled"))
       (advice-remove 'org--format-latex-make-overlay 'scimax-org-latex-fragment-justify-advice)
       (put 'scimax-org-latex-fragment-justify-advice 'enabled nil)
       (message "Latex fragment justification disabled")))
 #+END_SRC
#+BEGIN_SRC emacs-lisp
  )
#+END_SRC
** Org Functions

Smart return does add new list item, … if appropriate
note: if you're on a link, it opens the link
- http://irreal.org/blog/?p=6131
- http://kitchingroup.cheme.cmu.edu/blog/2017/04/09/A-better-return-in-org-mode/

#+BEGIN_SRC emacs-lisp
(after! org
  (defun unpackaged/org-element-descendant-of (type element)
    "Return non-nil if ELEMENT is a descendant of TYPE.
TYPE should be an element type, like 'item' or 'paragraph'.
ELEMENT should be a list like that returned by 'org-element-context'."
    ;; MAYBE: Use 'org-element-lineage'.
    (when-let* ((parent (org-element-property :parent element)))
      (or (eq type (car parent))
          (unpackaged/org-element-descendant-of type parent))))

;;;###autoload
  (defun unpackaged/org-return-dwim (&optional default)
    "A helpful replacement for 'org-return-indent'.  With prefix, call 'org-return-indent'.

On headings, move point to position after entry content.  In
lists, insert a new item or end the list, with checkbox if
appropriate.  In tables, insert a new row or end the table."
    ;; Inspired by John Kitchin: http://kitchingroup.cheme.cmu.edu/blog/2017/04/09/A-better-return-in-org-mode/
    (interactive "P")
    (if default
        (org-return t)
      (cond
       ;; Act depending on context around point.

       ((eq 'link (car (org-element-context)))
        ;; Link: Open it.
        (org-open-at-point-global))

       ((org-at-heading-p)
        ;; Heading: Move to position after entry content.
        ;; NOTE: This is probably the most interesting feature of this function.
        (let ((heading-start (org-entry-beginning-position)))
          (goto-char (org-entry-end-position))
          (cond ((and (org-at-heading-p)
                      (= heading-start (org-entry-beginning-position)))
                 ;; Entry ends on its heading; add newline after
                 (end-of-line)
                 (insert "\n\n"))
                (t
                 ;; Entry ends after its heading; back up
                 (forward-line -1)
                 (end-of-line)
                 (when (org-at-heading-p)
                   ;; At the same heading
                   (forward-line)
                   (insert "\n")
                   (forward-line -1))
                 ;; FIXME: looking-back is supposed to be called with more arguments.
                 (while (not (looking-back (rx (repeat 3 (seq (optional blank) "\n")))))
                   (insert "\n"))
                 (forward-line -1)))))

       ((org-at-item-checkbox-p)
        ;; Checkbox: Insert new item with checkbox.
        (org-insert-todo-heading nil))

       ((org-in-item-p)
        ;; Plain list.  Yes, this gets a little complicated...
        (let ((context (org-element-context)))
          (if (or (eq 'plain-list (car context))  ; First item in list
                  (and (eq 'item (car context))
                       (not (eq (org-element-property :contents-begin context)
                                (org-element-property :contents-end context))))
                  (unpackaged/org-element-descendant-of 'item context))  ; Element in list item, e.g. a link
              ;; Non-empty item: Add new item.
              (org-insert-item)
            ;; Empty item: Close the list.
            ;; TODO: Do this with org functions rather than operating on the text. Can't seem to find the right function.
            (delete-region (line-beginning-position) (line-end-position))
            (insert "\n"))))

       ((when (fboundp 'org-inlinetask-in-task-p)
          (org-inlinetask-in-task-p))
        ;; Inline task: Don't insert a new heading.
        (org-return t))

       ((org-at-table-p)
        (cond ((save-excursion
                 (beginning-of-line)
                 ;; See 'org-table-next-field'.
                 (cl-loop with end = (line-end-position)
                          for cell = (org-element-table-cell-parser)
                          always (equal (org-element-property :contents-begin cell)
                                        (org-element-property :contents-end cell))
                          while (re-search-forward "|" end t)))
               ;; Empty row: end the table.
               (delete-region (line-beginning-position) (line-end-position))
               (org-return t))
              (t
               ;; Non-empty row: call 'org-return-indent'.
               (org-return t))))
       (t
        ;; All other cases: call 'org-return-indent'.
        (org-return t))))))

(map!
 :after evil-org
 :map evil-org-mode-map
 :i [return] #'unpackaged/org-return-dwim)
#+END_SRC
[[github:alphapapa/unpackeged.el]]
Adds the mode unpackaged/org-table-face-mode which can be activated to make sure
tables are displayed in a monospace font
#+begin_src elisp
;;;###autoload
(define-minor-mode unpackaged/org-table-face-mode
  "Apply `org-table' face family to all text in Org tables.
Useful for forcibly applying the face to portions of table data
that might have a different face, which could affect alignment."
  :global nil
  (let ((keywords '((unpackaged/org-table-face-matcher 0 'org-table))))
    (if unpackaged/org-table-face-mode
        (font-lock-add-keywords nil keywords 'append)
      (font-lock-remove-keywords nil keywords))
    (font-lock-flush)))

(cl-defun unpackaged/org-table-face-matcher
    (limit &optional (face `(:family ,(face-attribute 'org-table :family))))
  "Apply FACE to entire Org tables.
A `font-lock-keywords' function that searches up to LIMIT."
  (cl-flet* ((find-face (face &optional limit not)
                        ;; Return next position up to LIMIT that has FACE, or doesn't if NOT.
                        (cl-loop with prev-pos
                                 with pos = (point)
                                 while (not (eobp))
                                 do (setf pos (next-single-property-change pos 'face nil limit))
                                 while (and pos (not (equal pos prev-pos)))
                                 for face-at = (get-text-property pos 'face)
                                 for face-matches-p = (or (eq face-at face)
                                                          (when (listp face-at)
                                                            (member face face-at)))
                                 when (or (and not (not face-matches-p))
                                          face-matches-p)
                                 return pos
                                 do (setf prev-pos pos)))
             (apply-face-from (pos face)
                              (unless (eobp)
                                (let* ((property-at-start (get-text-property pos 'face))
                                       (table-face-start (if (or (eq property-at-start 'org-table)
                                                                 (when (listp property-at-start)
                                                                   (member 'org-table property-at-start)))
                                                             (point)
                                                           (find-face 'org-table limit)))
                                       table-face-end)
                                  (when table-face-start
                                    (goto-char table-face-start)
                                    (setf table-face-end (line-end-position))
                                    (add-face-text-property table-face-start table-face-end face)
                                    (goto-char table-face-end))))))
    (cl-loop with applied-p
             for applied = (apply-face-from (point) face)
             when applied
             do (setf applied-p t)
             while applied
             finally return applied-p)))
#+END_SRC


* LSP Support in src blocks

By default, LSP doesn't really work at all in =src= blocks
#+BEGIN_SRC emacs-lisp
(cl-defmacro lsp-org-babel-enable (lang)
    "Support LANG in org source code block."
    (setq centaur-lsp 'lsp-mode)
    (cl-check-type lang stringp)
    (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
           (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
      `(progn
         (defun ,intern-pre (info)
           (let ((file-name (->> info caddr (alist-get :file))))
             (unless file-name
               (setq file-name (make-temp-file "babel-lsp-")))
             (setq buffer-file-name file-name)
              (lsp-deferred)))
         (put ',intern-pre 'function-documentation
              (format "Enable lsp-mode in the buffer of org source block (%s)."
                      (upcase ,lang)))
         (if (fboundp ',edit-pre)
             (advice-add ',edit-pre :after ',intern-pre)
           (progn
             (defun ,edit-pre (info)
               (,intern-pre info))
             (put ',edit-pre 'function-documentation
                  (format "Prepare local buffer environment for org source block (%s)."
                          (upcase ,lang))))))))
  (defvar org-babel-lang-list
    '("go" "python" "ipython" "bash" "sh" "c"))
  (dolist (lang org-babel-lang-list)
    (eval `(lsp-org-babel-enable ,lang)))
#+END_SRC


* Projects

My Projects are under ~/Projekte. This tells projectile to index them:
#+BEGIN_SRC emacs-lisp
(setq
 projectile-project-search-path '("~/Projekte"))
#+END_SRC
And ignore tmp, emacs.d

#+BEGIN_SRC emacs-lisp
(setq projectile-ignored-projects '("~/" "/tmp" "~/.emacs.d/.local/straight/repos/"))
(defun projectile-ignored-project-function (filepath)
  "Return t if FILEPATH is within any of 'projectile-ignored-projects'"
  (or (mapcar (lambda (p) (s-starts-with-p p filepath)) projectile-ignored-projects)))
#+END_SRC


* PATH

Setup path for texlive
#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":/opt/texlive/2020/bin/x86_64-linuxmusl"))
(setq exec-path (append exec-path '("/opt/texlive/2020/bin/x86_64-linuxmusl")))

#+END_SRC


* Authinfo

I just like syntax highlighting. So, let's define a mode with some simple font
locking.
#+BEGIN_SRC emacs-lisp :tangle lisp/authinfo-colour-mode.el :comments no
;;; authinfo-mode.el -*- lexical-binding: t; -*-
(setq authinfo-colour-keywords
      '(("^#.*" . font-lock-comment-face)
        ("^\\(machine\\)[ \t]+\\([^ \t\n]+\\)"
         (1 font-lock-variable-name-face)
         (2 font-lock-builtin-face))
        ("\\(login\\)[ \t]+\\([^ \t\n]+\\)"
         (1 font-lock-comment-delimiter-face)
         (2 font-lock-keyword-face))
        ("\\(password\\)[ \t]+\\([^ \t\n]+\\)"
         (1 font-lock-comment-delimiter-face)
         (2 font-lock-doc-face))
        ("\\(port\\)[ \t]+\\([^ \t\n]+\\)"
         (1 font-lock-comment-delimiter-face)
         (2 font-lock-type-face))
        ("\\([^ \t\n]+\\)[, \t]+\\([^ \t\n]+\\)"
         (1 font-lock-constant-face)
         (2 nil))))

(defun authinfo-colour--hide-passwords (start end)
  "Just `authinfo--hide-passwords' with a different colour face overlay."
  (save-excursion
    (save-restriction
      (narrow-to-region start end)
      (goto-char start)
      (while (re-search-forward "\\bpassword +\\([^\n\t ]+\\)"
                                nil t)
        (let ((overlay (make-overlay (match-beginning 1) (match-end 1))))
          (overlay-put overlay 'display (propertize "****"
                                                    'face 'font-lock-doc-face))
          (overlay-put overlay 'reveal-toggle-invisible
                       #'authinfo-colour--toggle-display))))))

(defun authinfo-colour--toggle-display (overlay hide)
  "Just `authinfo--toggle-display' with a different colour face overlay."
  (if hide
      (overlay-put overlay 'display (propertize "****" 'face 'font-lock-doc-face))
    (overlay-put overlay 'display nil)))

(defvar authinfo-hide-passwords t
  "Whether to hide passwords in authinfo.")

(define-derived-mode authinfo-colour-mode fundamental-mode "Authinfo"
  "Major mode for editing .authinfo files.

Like `fundamental-mode', just with colour and passoword hiding."
  (font-lock-add-keywords nil authinfo-colour-keywords)
  (setq-local comment-start "#")
  (setq-local comment-end "")
  (when authinfo-hide-passwords
    (authinfo-colour--hide-passwords (point-min) (point-max))
    (reveal-mode)))

(provide 'authinfo-colour-mode)
#+END_SRC
Now we just need to load it appropriately.
#+BEGIN_SRC emacs-lisp
(use-package! authinfo-colour-mode
  :mode ("authinfo\\.gpg\\'" . authinfo-colour-mode)
  :config
  (advice-add 'authinfo-mode :override #'authinfo-colour-mode))
#+END_SRC


* Programming

** Python

Setting the default interpreter to the system default
#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "python")
#+END_SRC
For some reason emacs tells me that my python-shell-interpreter doesnt support
readline
#+BEGIN_SRC emacs-lisp
(setq python-shell-completion-native-enable nil)
#+END_SRC


** Typescript

This function sets up tide-mode, as described on the
[[github:ananthakumaran/tide]]
#+BEGIN_SRC emacs-lisp
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (eldoc-mode)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  (company-mode +1))
#+END_SRC

*** React Native

For developing in tsx, the tide git suggests the following:
I just changed the last line since we decided to use eslint due to the fact that
tslint is deprecated. Eslint offers enough typescript stuff to use.
#+BEGIN_SRC emacs-lisp
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
(add-hook 'web-mode-hook
          (lambda ()
            (when (string-equal "tsx" (file-name-extension buffer-file-name))
              (setup-tide-mode))))
#+END_SRC
Some additional react tsx settings:
#+BEGIN_SRC emacs-lisp
(add-hook 'web-mode-hook 'company-mode)
(add-hook 'web-mode-hook 'prettier-js-mode)
#+END_SRC


** Snippets
Add private snippet dir to yasnippet
#+BEGIN_SRC emacs-lisp
(after! yasnippet
  (push (expand-file-name "snippets/" doom-private-dir) yas-snippet-dirs))
(yas-global-mode 1)
#+END_SRC


* Tramp
It's recommended to connect to a bash shell via ssh using tramp
else, connecting might fail because tramp doesnt recognize the prompt
#+BEGIN_SRC emacs-lisp
(eval-after-load 'tramp '(setenv "$SHELL" "/bin/bash"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC

Add Keybinding to open counsel-tramp
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-c s") 'counsel-tramp)
#+END_SRC
** Speeding up tramp
Setting hook that turn off slow extensions when you execute counsel-tramp.
#+BEGIN_SRC emacs-lisp
(add-hook 'counsel-tramp-pre-command-hook '(lambda ()
                     (projectile-mode 0)
                     (editorconfig-mode 0)))
#+END_SRC

Setting hook that turn on extensions when you execute counsel-tramp-quit
command.
#+BEGIN_SRC emacs-lisp
(add-hook 'counsel-tramp-quit-hook '(lambda () (global-aggressive-indent-mode 1)
                  (projectile-mode 1)
                  (editorconfig-mode 1)))
#+END_SRC

If you don't make a backup files and lockfiles at remote server, it will be
saved faster.
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq create-lockfiles nil)
#+END_SRC


* Configuration help

Here are some additional functions/macros that could help you configure Doom:

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.


* Packages
:PROPERTIES:
:header-args:emacs-lisp: :tangle "packages.el" :comments link
:END:

This file shouldn't be byte compiled.
#+BEGIN_SRC emacs-lisp :tangle "packages.el" :comments no
;; -*- no-byte-compile: t; -*-
#+END_SRC

** Org Mode

*** Improve scientifical writing

For citing
#+BEGIN_SRC emacs-lisp
(package! org-ref)
#+END_SRC

*** Improve agenda/capture

The agenda is nice, but a souped up version is nicer.
#+BEGIN_SRC emacs-lisp
(package! org-super-agenda :pin "dd0d104c269fab9ebe5af7009bc1dd2a3a8f3c12")
#+END_SRC

Similarly ~doct~ (Declarative Org Capture Templates) seems to be a nicer way to
set up org-capture.
#+BEGIN_SRC emacs-lisp
(package! doct
  :recipe (:host github :repo "progfolio/doct")
  :pin "80d291e5f1cbdabd4eb7f88c917653c59d3f14be")
#+END_SRC

** Visuals

Org tables aren't the prettiest thing to look at. This package is supposed to
redraw them in the buffer with box-drawing characters. Sounds like an
improvement to me! Just need to get it working...
#+BEGIN_SRC emacs-lisp
(package! org-pretty-table-mode
  :recipe (:host github :repo "Fuco1/org-pretty-table") :pin "88380f865a79bba49e4f501b7fe73a7bfb03bd1a")
#+END_SRC

For automatically toggling LaTeX fragment previews there's this nice package
#+BEGIN_SRC emacs-lisp
(package! org-fragtog :pin "92119e3ae7c9a0ae2b5c9d9e4801b5fdc4804ad7")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(package! org-pretty-tags)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(package! nyan-mode)
(package! poke-line)
#+END_SRC

** Programming

#+BEGIN_SRC emacs-lisp
(package! jinja2-mode)
(package! prettier-js)
#+END_SRC

** Admin

#+BEGIN_SRC emacs-lisp
(package! counsel-tramp)
#+END_SRC

** Speed Typing

#+BEGIN_SRC emacs-lisp
(package! speed-type)
#+END_SRC
