#+TITLE: Readme
* About this Project
These are my dotfiles (settings for programs I customized so much that I can't
go without them and don't want to hassle setting my environment up again).

The idea is - store settings in your git Account and just clone them and you're
good to go.


** About this Documentation

As you might have noticed, the dotfiles are relatively well documented. Every
folder contains a documentation for the exact program.
It is accomplished using [[https://orgmode.org][Org Mode]] in [[www.gitlab.com/hlissner/doom-emacs][Doom]] on [[www.gnu.org/software/emacs/Emacs][Emacs]] with my [[./.doom.d/config.org][personal configuration]] (this
renders best viewed in Emacs, I don't know if the link works in gitlab).

* ToC :toc:
- [[#about-this-project][About this Project]]
  - [[#about-this-documentation][About this Documentation]]
- [[#magit-forge][Magit Forge]]
- [[#git-g][Git G]]
- [[#tmux-itt][Tmux iTT]]
- [[#vim][Vim]]
- [[#zsh][Zsh]]
  - [[#zshenv][.zshenv]]
  - [[#zprofile][.zprofile]]
- [[#bash][Bash]]
  - [[#bashrc][.bashrc]]
  - [[#bash_profile][.bash_profile]]
  - [[#bash_aliases][.bash_aliases]]
- [[#x-stuff][X Stuff]]
  - [[#xresources][.Xresources]]

* Magit Forge

This contains my api key for connecting to gitlab and working/editing gitlab
issues using [[https://github.com/magit/forge/][magit-forge]]
I do not include this here, because it would be stored unencrypted.

* Git G

This is my global git configuration

This is basic configuration
#+BEGIN_SRC git :tangle .gitconfig
[user]
	email = valentin_lechner@dismail.de
	name = valentin_lechner
#+END_SRC
It can be set using
#+BEGIN_SRC sh
git config --global user.name <your user>
git config --global user.email <your email>
#+END_SRC

This configures git to use my private key to sign every commit
#+BEGIN_SRC git :tangle .gitconfig
	signingkey = 9C489382
[commit]
	gpgsign = true
#+END_SRC
Some other stuff I configured, probably not too important
#+BEGIN_SRC git :tangle .gitconfig
[gitlab]
	user = valentin_lechner
[pull]
	rebase = false
#+END_SRC

* Tmux iTT

I use the terminal multiplexer [[https://github.com/tmux/tmux][tmux]], which basically is a window manager for
your terminal and allows you to outsource some unnecessary work that your terminal does to
tmux. It allows to use multiple terminals in the same window in splits.

Since I found the default keybinding =C-b= hard to reach, I settled for =C-a=. When
I connected to a screen-session on a server, I ran into keybinding issues. For
now, I solved it using =C-s= as my keybinding. Seems good so far.
#+BEGIN_SRC sh :tangle .tmux.conf
unbind C-b
set-option -g prefix C-s
bind-key C-s send-prefix
#+END_SRC

Everyone knows that we count from zero
#+BEGIN_SRC sh :tangle .tmux.conf
set -g base-index 0
#+END_SRC

Automatically set window title
#+BEGIN_SRC sh :tangle .tmux.conf
set-window-option -g automatic-rename on
set-option -g set-titles on
#+END_SRC
Some basic stuff
#+BEGIN_SRC sh :tangle .tmux.conf
set -g default-terminal "screen-256color"
set -g history-limit 10000
#+END_SRC
Evil mode everywhere
#+BEGIN_SRC sh :tangle .tmux.conf
set -g status-keys vi
setw -g mode-keys vi
#+END_SRC
This notifies you when something changes in another window
#+BEGIN_SRC sh :tangle .tmux.conf
setw -g monitor-activity on
#+END_SRC
Add some sensible keybindings for splitting windows.
=C-s + v=: split vertically
=C-s + h=: split horizontally
#+BEGIN_SRC sh :tangle .tmux.conf
bind-key v split-window -h
bind-key s split-window -v
#+END_SRC
Evil resizing using Uppercase hjkl
#+BEGIN_SRC sh :tangle .tmux.conf
bind-key J resize-pane -D 5
bind-key K resize-pane -U 5
bind-key H resize-pane -L 5
bind-key L resize-pane -R 5
bind-key M-j resize-pane -D
bind-key M-k resize-pane -U
bind-key M-h resize-pane -L
bind-key M-l resize-pane -R
#+END_SRC
Evil style pane selection
#+BEGIN_SRC sh :tangle .tmux.conf
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

#+END_SRC
Use Alt-vim keys without prefix key to switch panes
#+BEGIN_SRC sh :tangle .tmux.conf
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R
#+END_SRC


No delay for escape key press
#+BEGIN_SRC sh :tangle .tmux.conf
set -sg escape-time 0
#+END_SRC
Reload tmux config
#+BEGIN_SRC sh :tangle .tmux.conf
bind r source-file ~/.tmux.conf
#+END_SRC
THEME
#+BEGIN_SRC sh :tangle .tmux.conf
set -g status-bg default
set -g status-fg green
set -g status-interval 60
set -g status-left-length 30
set -g status-left '#[fg=green](#S) #(whoami)'
set -g status-right '#[fg=yellow]#(cut -d " " -f 1-3 /proc/loadavg)#[default] #[fg=white]%H:%M#[default]'
#+END_SRC

* Vim

My configuration for the glorious editor, whose keybindings I'd like to use for
everything.

I use [[https://github.com/VundleVim/Vundle.vim.git][Vundle]] as a Plugin Manager for vim.
It requires to be cloned into your home directory:
#+BEGIN_SRC sh
git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
#+END_SRC
To install plugins, it requires the following settings in your .vimrc:
#+BEGIN_SRC vim :tangle .vimrc
set nocompatible              " be iMproved, required
filetype off                  " required
set rtp+=~/.vim/bundle/Vundle.vim
#+END_SRC
This is something I added extra. Not sure why.
#+BEGIN_SRC vim :tangle .vimrc
set exrc
set secure
#+END_SRC
This is needed by Vundle
#+BEGIN_SRC vim :tangle .vimrc
call vundle#begin()
#+END_SRC
Inbetween the begin/end block, you can add your plugins
#+BEGIN_SRC vim :tangle .vimrc
Plugin 'junegunn/fzf.vim'
Plugin 'VundleVim/Vundle.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'w0rp/ale'
#+END_SRC
End of the plugins block
#+BEGIN_SRC vim :tangle .vimrc
call vundle#end()
#+END_SRC
My other settings
#+BEGIN_SRC vim :tangle .vimrc
syntax enable
set laststatus=2
set ttimeoutlen=50
let g:airline_powerline_fonts = 1
let g:airline_theme = 'deus'
#+END_SRC

Plugins can now be installed using
#+BEGIN_SRC sh
vim +PluginInstall +qall
#+END_SRC
* Zsh

This is only part of my zsh configuration, the main stuff is in
[[.config/zsh/.zshrc]].

** .zshenv

My settings for the zsh environment
#+BEGIN_SRC zsh :tangle .zshenv
export XDG_DATA_HOME="$HOME/.local/share"

export HISTFILE="${XDG_DATA_HOME:-$HOME/.local/share}/history"

export HISTSIZE=100000

export SAVEHIST=$HISTSIZE

export ZDOTDIR="${XDG_CONFIG_HOME:-$HOME/.config}/zsh"
#+END_SRC


** .zprofile

*** Proxychains

I configured =proxychains= to connect to a running tor service. =proxychains= allows
to set the =conf= file via the variable =PROXYCHAINS_CONF_FILE=. Usually, it is
located in the home directory - this bloats home, so I decided to put it into
.config
#+BEGIN_SRC zsh :tangle .zprofile
[ -d "$HOME/.config/proxychains" ] && export PROXYCHAINS_CONF_FILE="$HOME/.config/proxychains/proxychains.conf"
#+END_SRC



*** Path variables

This contains a set of add-to-path-if-exists stuff.
Meaning, cargo stuff will only be in path if the folder is there and so on.


Set Android Development specific vars
#+BEGIN_SRC zsh :tangle .zprofile
[ -d "$HOME/Android/Sdk" ]  && export ANDROID_HOME="$HOME/Android/Sdk"

[ -z "$ANDROID_HOME" ]      && [ -d "$ANDROID_HOME/platform-tools" ] && PATH="$ANDROID_HOME/platform-tools"
[ -z "$ANDROID_HOME" ]      && [ -d "$ANDROID_HOME/tools" ]          && PATH="$ANDROID_HOME/tools"
#+END_SRC
go progs (f.e lf)
#+BEGIN_SRC zsh :tangle .zprofile
[ -d "$HOME/go/bin" ]       && PATH="$HOME/go/bin:$PATH"
#+END_SRC
doom Emacs
#+BEGIN_SRC zsh :tangle .zprofile
[ -d "$HOME/.emacs.d/bin" ] && PATH="$HOME/.emacs.d/bin:$PATH"
#+END_SRC
Python
#+BEGIN_SRC zsh :tangle .zprofile
[ -d "$HOME/.local/bin" ]   && PATH="$HOME/.local/bin:$PATH"
#+END_SRC
cabal (haskell)
#+BEGIN_SRC zsh :tangle .zprofile
[ -d "$HOME/.cabal/bin" ]   && PATH="$HOME/.cabal/bin:$PATH"
#+END_SRC
cargo for rusty stuff
#+BEGIN_SRC zsh :tangle .zprofile
[ -d "$HOME/.cargo/bin" ]   && PATH="$HOME/.cargo/bin:$PATH"
#+END_SRC
And export path
#+BEGIN_SRC zsh :tangle .zprofile
export PATH
#+END_SRC
*** Editor

#+BEGIN_SRC zsh :tangle .zprofile
export EDITOR='emacs -nw'
export VISUAL='emacs -nw'
#+END_SRC

*** XDG

Relocate some config files to be located in =~/.config= instead of =~=
#+BEGIN_SRC zsh :tangle .zprofile
export XDG_DATA_HOME="$HOME/.local/share"
export HISTFILE="${XDG_DATA_HOME:-$HOME/.local/share}/history"
export HISTSIZE=100000
export SAVEHIST=$HISTSIZE
export ZDOTDIR="${XDG_CONFIG_HOME:-$HOME/.config}/zsh"
#+END_SRC




* Bash

I don't really use bash anymore, I favor [[www.zsh.org][Zsh]], that's why this part is probably
not up-to-date and not as well documented.

** .bashrc

#+BEGIN_SRC bash :tangle .bashrc :shebang "#!/usr/bin/env bash"
shopt -s extglob
# turns off cowbell
xset -b

cd "$HOME" || return
eval "$(thefuck --alias)"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$HOME/.nvm/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$HOME/.nvm/bash_completion"

export EDITOR='vim'

# schneide float ab -> int
fk_cutfloat()
{
    float=$1
    int=${float%.*}
    echo "$int"
}


# openssl password generator
fk_passwdgen() {
    openssl rand -base64 "$1"
}

# cd .. n times
.. ()
{
        local arg=${1:-1};
        local dir=""
        while [ "$arg" -gt 0 ]; do
            dir="../$dir"
            arg=$(("$arg" - 1));
        done
        cd $dir >&/dev/null || echo "Directory does not exist" && exit 2
}

#start command in bg, redir output to /dev/null
fk_s()
{
    ("$@" & disown ) >/dev/null 2>&1 </dev/null
      which "$1" >/dev/null 2>&1
}

fk_zathura()
{
    fk_s zathura "$1"
}

fk_extract()
{
      if [ -f "$1" ] ; then
              case "$1" in
                  *.tar.bz2)   tar xvjf "$1"    ;;
                  *.tar.gz)    tar xvzf "$1"    ;;
                  *.bz2)       bunzip2 "$1"     ;;
                  *.rar)       rar x "$1"       ;;
                  *.gz)        gunzip "$1"      ;;
                  *.tar)       tar xvf "$1"     ;;
                  *.tbz2)      tar xvjf "$1"    ;;
                  *.tgz)       tar xvzf "$1"    ;;
                  *.zip)       unzip "$1"       ;;
                  *.Z)         uncompress "$1"  ;;
                  *.7z)        7z x "$1"        ;;
                  *)           echo "don't know how to extract $1..." ;;
              esac
      else
              echo "$1"" is not a valid file!"
      fi
}

# wetter
weather()
{
    curl "https://wttr.in/$1"
}

fk_bandit()
{
    cat ~/bandit/bandit"$1"
    ssh bandit"$1"@bandit.labs.overthewire.org -p 2220
}

fk_addbanditkey()
{
    echo "$1" > ~/bandit/bandit"$2"
}

fk_alarm(){
    (speaker-test --frequency "$1" --test sine)& pid=$!;sleep 0.2;kill -9 $pid
}

#************************************************
#             Projektordner öffnen
#************************************************

# aktuelles projekt
alias cda='cd ~/.dev && echo $(tput setaf 1) No project specified'

# aktuelles zweitprojekt
alias cdzp='cd ~/.dev && echo $(tput setaf 1) No project specified'

# Projekteordner
alias cdp='cd ~/.dev/'
#+END_SRC
** .bash_profile

#+BEGIN_SRC bash :tangle .bash_profile :shebang "#!/usr/bin/env bash"
[[ -f ~/.bashrc ]] && . ~/.bashrc

export PYTHONIOENCODING=UTF-8

#eval `keychain --eval $(cat $HOME/.ssh/sshkeys)` 
if [ -n "$DESKTOP_SESSION" ];then
    eval "$(gnome-keyring-daemon --start)"
    export SSH_AUTH_SOCK
fi
#+END_SRC

** .bash_aliases

#+BEGIN_SRC bash :tangle .bash_aliases :shebang "#!/usr/bin/env bash"
# v = vim
alias v='vim'
# konfigurationsdateien
alias brc='vim ~/.bashrc'
alias ba='vim ~/.bash_aliases'

# wget autoresume
alias wget='wget -c'


# verbesserte ls's
alias ls='ls -h --color'
alias ll='ls -l'
alias la='ll -A'
#+END_SRC









* X Stuff

The [[https://x.org/wiki][X Window System]] is a system used on many linux desktops. It might soon
become deprecated as [[https://wayland.freedesktop.org/][Wayland]] seems to be a lot easier.
There's already a lot of window managers supporting wayland, I still use X
though.

Since I use [[https://github.com/CanonicalLtd/lightdm][LightDM]] as Login Manager with [[github:prikhi/lightdm-mini-greeter]], I
do not use =.xinitrc= or =.xprofile=.

** .Xresources

=.Xresources= can be used to set Parameters of X Computer Programs.
It can be used to configure terminal preferences and fonts and stuff, also there
is a number of applications whose conf-File is =.Xresources=, namely the terminal
emulator rxvt-unicode. In my case, I installed [[https://github.com/jcaw/theme-magic][theme-magic-from-emacs]], which is
available on [[https://melpa.org/][MELPA]] and [[https://github.com/dylanaraps/pywal][pywal]] to generate it for my favorite emacs theme
=doom-moonlight=.

This is the base colorset
#+BEGIN_SRC conf :tangle .Xresources
*.color0: #202236
*color0:  #202236
*.color1: #FE747E
*color1:  #FE747E
*.color2: #7987CE
*color2:  #7987CE
*.color3: #FEC676
*color3:  #FEC676
*.color4: #BF98FE
*color4:  #BF98FE
*.color5: #C2E78C
*color5:  #C2E78C
*.color6: #81A9FE
*color6:  #81A9FE
*.color7: #C7D2F4
*color7:  #C7D2F4
*.color8: #434972
*color8:  #434972
*.color9: #FE747E
*color9:  #FE747E
*.color10: #7987CE
*color10:  #7987CE
*.color11: #FEC676
*color11:  #FEC676
*.color12: #BF98FE
*color12:  #BF98FE
*.color13: #C2E78C
*color13:  #C2E78C
*.color14: #81A9FE
*color14:  #81A9FE
*.color15: #C7D2F4
*color15:  #C7D2F4
#+END_SRC
This black color will not be affected by bold highlighting.
#+BEGIN_SRC conf :tangle .Xresources
*.color66: #202236
*color66:  #202236
#+END_SRC


 


# Local Variables:
# eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
# End:
